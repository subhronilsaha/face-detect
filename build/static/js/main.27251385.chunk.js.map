{"version":3,"sources":["assets/Logo.png","assets/bg-img.jpg","Components/Navigation.js","Components/Sign In/SignIn.js","Components/Register/Register.js","Components/UserScore.js","Components/ImageLinkForm/ImageLinkForm.js","Components/Face Recognition/FaceRecognition.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","onRouteChange","style","height","width","background","borderBottom","display","justifyContent","padding","alt","src","Logo","Button","variant","className","onClick","SignIn","type","placeholder","name","required","disabled","Register","onNameSubmit","useState","input","setInput","onChange","e","target","value","UserScore","faces","ImageLinkForm","onInputChange","onButtonSubmit","fontSize","FaceRecognition","box","top","topRow","bottom","bottomRow","left","leftCol","right","rightCol","app","Clarifai","App","apiKey","event","setState","calculateNumberOfFaces","data","numberOfFaces","outputs","regions","length","console","log","calculateFaceLocation","index","clarafaiFace","region_info","bounding_box","image","document","getElementById","imageWidth","Number","imageHeight","left_col","top_row","right_col","bottom_row","imageUrl","state","models","predict","FACE_DETECT_MODEL","then","response","i","boxes","push","catch","err","route","Container","fluid","margin","this","position","bgImg","Row","minHeight","Col","xs","sm","alignItems","id","map","key","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.27251385.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.e9b87802.png\";","module.exports = __webpack_public_path__ + \"static/media/bg-img.b42f7c0b.jpg\";","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport Logo from '../assets/Logo.png';\n\nconst Navigation = ({ onRouteChange }) => {\n    const navStyle = {\n        height: \"60px\",\n        width: \"100%\",\n        background: \"rgb(255, 255, 255)\",\n        borderBottom: \"black solid 1px\", \n        display: \"flex\", \n        justifyContent: \"space-between\",\n        padding: \"6px 20px\"\n    }\n\n    return (\n        <div style={navStyle}>\n            <img alt=\"\" src={Logo} width=\"160px\" />\n            <Button variant=\"outline-danger\" className=\"float-right\" onClick={() => onRouteChange('signin')}>Sign Out</Button>\n        </div>\n    )\n}\n\nexport default Navigation;","import React from 'react';\nimport Button from 'react-bootstrap/Button';\nimport './SignIn.css';\n\nconst SignIn = ({ onRouteChange }) => {\n\n    const centerify = {\n        display: \"flex\", \n        justifyContent: \"center\", \n    }\n\n    return (\n        <div style={centerify}>\n            <div className=\"form-container\">\n                <h1>Sign In</h1>\n                <br />\n                <h5>Welcome to Face Detect! Enter your details to begin.</h5>\n                <br />\n  \n                <label><b>Email</b></label>\n                <input \n                    type=\"text\" \n                    placeholder=\"Enter Email\" \n                    name=\"email\"\n                />\n                \n                <br />\n\n                <label><b>Password</b></label>\n                <input \n                    type=\"password\" \n                    placeholder=\"Enter Password\" \n                    name=\"psw\" \n                    required \n                />\n                    \n                <br />\n                <br />\n\n                <div className=\"go-to-register\">\n                    <p>Don't have an account?   \n                        <Button \n                            variant=\"outline-warning\" \n                            onClick= {() => onRouteChange('register')}\n                            className= \"ml-2\"\n                        >\n                            Register\n                        </Button>.\n                    </p>\n                </div>\n\n                <br />\n\n                <Button \n                    variant=\"primary\" \n                    type=\"submit\"\n                    onClick={() => onRouteChange('home')}\n                    disabled\n                >\n                    Submit\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default SignIn;","import React, { useState } from 'react'\nimport Button from 'react-bootstrap/Button';\nimport \"../Sign In/SignIn.css\";\n\nconst Register = ({ onRouteChange, onNameSubmit }) => {   \n    \n    const [input, setInput] = useState(false);\n\n    const centerify = {\n        display: \"flex\", \n        justifyContent: \"center\", \n    }\n\n    function checkInputs(e) {\n        // Form Validation\n        let name = e.target.value;\n\n        if (name === '' || name === ' ') {\n            setInput(false)\n        } else {\n            setInput(true)\n        }\n\n        onNameSubmit(e);\n    }\n\n    return (\n        <div style={centerify}>\n            <div className=\"form-container\">\n                <h1>Register</h1>\n                <br />\n                <h5>Welcome to Face Detect! Enter your details to begin.</h5>\n                <br />\n\n                <label><b>Name</b></label>\n                <input \n                    type=\"text\" \n                    placeholder=\"Enter Name\" \n                    name=\"name\" \n                    onChange= {checkInputs}\n                    required \n                />\n\n                <br />\n\n                <label><b>Email</b></label>\n                <input type=\"text\" placeholder=\"Enter Email\" name=\"email\" required />\n                \n                <br />\n\n                <label><b>Password</b></label>\n                <input type=\"password\" placeholder=\"Enter Password\" name=\"psw\" required />\n                    \n                <br />\n                <br />\n\n                <div>\n                    <p>Already have an account?   \n                        <Button \n                            variant=\"outline-warning\" \n                            onClick= {() => onRouteChange('signin')}\n                            className= \"ml-2\"\n                        >\n                            Login\n                        </Button>.\n                    </p>\n                </div>\n\n                <br />\n\n                <Button \n                    variant=\"primary\" \n                    type=\"submit\"\n                    onClick={() => onRouteChange('home')}\n                    disabled = {input ? false : true}\n                >\n                    Submit\n                </Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Register;","import React from 'react';\n\nconst UserScore = ({ name, faces }) => {\n    return (\n        <div className=\"text-light mt-5\">\n            <h1 className=\"text-warning\">Welcome {name}.</h1>\n            <br />\n            <h4>You have detected <span className=\"text-success\">{faces}</span> faces.</h4>\n        </div>\n    )\n}\n\nexport default UserScore;","import React from 'react'\nimport Button from 'react-bootstrap/Button'\nimport './ImageLinkForm.css';\n\nconst ImageLinkForm = ({ onInputChange, onButtonSubmit }) => {\n    return (\n        <div className=\"text-light mt-5\">\n            <p style={{fontSize: \"20px\"}}>This software will detect faces in your pictures! (powered by Clarif.ai)</p>\n            <p style={{fontSize: \"20px\"}} className=\"text-success\">Enter a link to an image to begin.</p>\n            <div>\n                <input className=\"image-link-form\" type=\"text\" onChange={ onInputChange } />\n                <Button variant=\"success\" onClick={ onButtonSubmit }>Detect Faces</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default ImageLinkForm;","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({ box }) => {\n    return (\n        <div style={{background: \"white\"}}>\n            <div className=\"bounding-box\" \n                style={{\n                    top: box.topRow, \n                    bottom: box.bottomRow, \n                    left: box.leftCol, \n                    right: box.rightCol\n                }}>\n            </div>\n        </div>\n    )\n}\n\nexport default FaceRecognition;","import React from 'react';\nimport Clarifai from 'clarifai';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Navigation from './Components/Navigation';\nimport SignIn from './Components/Sign In/SignIn';\nimport Register from './Components/Register/Register';\nimport UserScore from './Components/UserScore';\nimport ImageLinkForm from './Components/ImageLinkForm/ImageLinkForm';\nimport FaceRecognition from './Components/Face Recognition/FaceRecognition';\nimport bgImg from './assets/bg-img.jpg';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nconst app = new Clarifai.App({\n  apiKey: 'edde4e65d57d4ae5b35aeab79b52cfb1'\n});\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      boxes: [], \n      route: 'signin', \n      faces: 0, \n      name: ''\n    }\n  }\n\n  onInputChange = (event) => {\n    this.setState({input: event.target.value});\n  }\n\n  calculateNumberOfFaces = (data) => {\n    const numberOfFaces = data.outputs[0].data.regions.length;\n    this.setState({ faces: numberOfFaces });\n    console.log(numberOfFaces);\n    return numberOfFaces;\n  }\n\n  calculateFaceLocation = (data, index) => {\n    const clarafaiFace = data.outputs[0].data.regions[index].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const imageWidth = Number(image.width);\n    const imageHeight = Number(image.height);\n    console.log(imageHeight, imageWidth);\n\n    return {\n      leftCol: clarafaiFace.left_col * imageWidth,\n      topRow: clarafaiFace.top_row * imageHeight,\n      rightCol: imageWidth - (clarafaiFace.right_col * imageWidth),\n      bottomRow: imageHeight - (clarafaiFace.bottom_row * imageHeight)\n    }\n  }\n\n  onButtonSubmit = () => {\n    this.setState({imageUrl: this.state.input})\n    app.models\n      .predict(\n        Clarifai.FACE_DETECT_MODEL, \n        this.state.input\n      )\n      .then(response => {\n        const numberOfFaces = this.calculateNumberOfFaces(response);\n        var boxes = [];\n        var i;\n        for(i = 0; i<numberOfFaces; i++) {\n          const box = this.calculateFaceLocation(response, i);\n          boxes.push(box);\n          console.log(boxes);\n        }\n        this.setState({ boxes: boxes });\n      })\n      .catch((err) => console.log(err));  \n  }\n\n  onRouteChange = (route) => {\n    this.setState({ route: route });\n  }\n\n  onNameSubmit = (event) => {\n    this.setState({ name: event.target.value });\n  }\n\n  render() {\n    const HomePageStyle = { \n      padding: \"0 50px 60px 50px\",\n      minHeight: \"100vh\",\n      background: \"rgba(19, 19, 19, 0.7)\" \n    }\n\n    return (\n      <div className=\"App\">\n        <Container fluid=\"true\" style={{margin: 0, padding: 0}}>\n          <Navigation onRouteChange={this.onRouteChange} />\n          <div style={{position: \"absolute\", top: 0, left: 0}}>\n            <img src={bgImg} alt=\"\" className=\"background-img\" />\n          </div>\n\n          {this.state.route === 'home' \n              ? <Container> \n                <Row style={HomePageStyle}>\n                  <Col xs={12} sm={6}>\n                    <UserScore \n                      name={ this.state.name }\n                      faces={ this.state.faces } \n                    />\n                    <ImageLinkForm \n                      onInputChange={ this.onInputChange } \n                      onButtonSubmit={ this.onButtonSubmit } \n                    />\n                  </Col>\n                  <Col style={{ alignItems: \"center\" }} xs={12} sm={6}>\n                    <div>\n                      <img \n                        id=\"inputImage\" \n                        className=\"image-received\"\n                        alt='' src={this.state.imageUrl}\n                      />\n                      {this.state.boxes.map((box, index) => {\n                        return (\n                          <FaceRecognition \n                            box={box} \n                            key={index}\n                          /> \n                        )\n                      })}\n                    </div>\n                  </Col>\n                </Row>\n              </Container>\n\n            : (this.state.route === 'signin' \n                ? <SignIn \n                    onRouteChange={ this.onRouteChange } \n                  />\n                : <Register \n                    onRouteChange={ this.onRouteChange } \n                    onNameSubmit={ this.onNameSubmit } \n                  />)\n          }\n        </Container>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}